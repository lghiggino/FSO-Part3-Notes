{"version":3,"sources":["components/Note.js","components/Footer.js","services/noteService.js","App.js","index.js"],"names":["Note","note","toggleImportance","updateDate","removeNote","label","important","className","date","split","content","onClick","Footer","style","color","fontStyle","fontSize","position","bottom","baseUrl","axios","get","then","response","data","newObject","post","id","put","removedObject","delete","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","setErrorMessage","loadNotes","a","noteService","responseNotes","catch","error","console","log","find","n","newDate","Date","toISOString","changedNote","responseNote","map","finally","setTimeout","filter","useEffect","notesToShow","toggleImportanceOf","updateDateOf","onSubmit","event","preventDefault","noteObject","Math","random","concat","value","onChange","target","placeholder","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a889695e.chunk.js","sourcesContent":["const Note = ({ note, toggleImportance, updateDate, removeNote }) => {\n\n    const label = note.important ? \"make not important\" : \"make important\"\n\n    return (\n        <li className={note.important ? \"noteLiBold\" : \"noteLi\"}>\n            <span>{note.date.split(\"T\")[0]}</span>\n            <span>{note.content}</span>\n            <button onClick={toggleImportance}>{label}</button>\n            <button onClick={updateDate}>Update date</button>\n            <button onClick={removeNote}>Remove note</button>\n        </li>\n    )\n}\n\nexport default Note","export default function Footer() {\n    const footerStyle = {\n        color: \"grey\",\n        fontStyle: \"italic\",\n        fontSize: 16,\n        position: \"fixed\",\n        bottom: \"16px\"\n    }\n    return (\n        <footer style={footerStyle}>\n            <em>Note app, Department of Computer Science, University of Helsini 2021</em>\n        </footer>\n    )\n\n}","import axios from \"axios\"\nconst baseUrl = \"api/notes\"\n//\"https://peaceful-crag-14176.herokuapp.com/api/notes\"\n\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst updateImportance = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}/importance`, newObject)\n    return request.then(response => response.data)\n}\n\nconst updateDate = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}/date`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id, removedObject) => {\n    axios.delete(`${baseUrl}/${id}`, removedObject)\n    return axios.get(baseUrl)\n}\n\nexport default { getAll, create, updateImportance, updateDate, remove }","import React, { useState, useEffect } from 'react';\n//import axios from \"axios\"\nimport './App.css';\n\n\n/* PHONEBOOK */\n// import AllNames from \"./components/AllNames\"\n// import FilteredNames from './components/FilteredNames';\n// import FilterForm from \"./components/FilterForm\";\n// import AddPersonForm from './components/AddPersonForm';\n\n// import personService from \"./services/persons\"\n\n// function App() {\n//   const [persons, setPersons] = useState([])\n//   const [newName, setNewName] = useState(\"\")\n//   const [nameError, setNameError] = useState(false)\n//   const [nameEditSuccess, setNameEditSuccess] = useState(false)\n//   const [wrongName, setWrongName] = useState(\"\")\n//   const [newPhone, setNewPhone] = useState(\"\")\n//   const [searchName, setSearchName] = useState(\"\")\n//   const [filteredPersonsArray, setFilteredPersonsArray] = useState([])\n//   const [filterError, setFilterError] = useState(false)\n//   const [showAll, setShowAll] = useState(true)\n\n//   useEffect(() => {\n//     personService.getAll().then(response => {\n//       setPersons(response.data)\n//     })\n//   }, [])\n\n//   return (\n//     <div className=\"App\">\n//       <h2>Phonebook</h2>\n\n//       <AddPersonForm\n//         persons={persons}\n//         newName={newName}\n//         nameError={nameError}\n//         wrongName={wrongName}\n//         newPhone={newPhone}\n//         setPersons={setPersons}\n//         setNewName={setNewName}\n//         setNameError={setNameError}\n//         setWrongName={setWrongName}\n//         setNewPhone={setNewPhone}\n//         setNameEditSuccess={setNameEditSuccess}\n//       />\n\n//       <FilterForm\n//         persons={persons}\n//         filteredPersonsArray={filteredPersonsArray}\n//         searchName={searchName}\n//         filterError={filterError}\n//         showAll={showAll}\n//         setSearchName={setSearchName}\n//         setFilteredPersonsArray={setFilteredPersonsArray}\n//         setFilterError={setFilterError}\n//         setShowAll={setShowAll}\n//       />\n\n//       <AllNames persons={persons} nameError={nameError} wrongName={wrongName} setPersons={setPersons} nameEditSuccess={nameEditSuccess} />\n\n//       <FilteredNames filteredPersonsArray={filteredPersonsArray} filterError={filterError} setPersons={setPersons}/>\n\n//     </div>\n//   );\n// }\n\n\n/* NOTES */\nimport Note from './components/Note';\nimport Footer from \"./components/Footer\";\n\nimport noteService from \"./services/noteService\"\n\nfunction App() {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState(\"\")\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  useEffect(() => {\n    loadNotes()\n  }, [])\n\n  async function loadNotes() {\n    noteService.getAll().then(responseNotes => {\n      setNotes(responseNotes)\n    })\n      .catch(error => {\n        console.log(\"Failed to Load Notes\", error)\n      })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.4,\n      // id: notes.length + 1\n    }\n\n    noteService.create(noteObject).then(responseNote => {\n      setNotes(notes.concat(responseNote))\n      setNewNote(\"\")\n    })\n      .catch(error => {\n        console.log(\"Failed to Create New Note\", error)\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService.updateImportance(id, changedNote).then(responseNote => {\n      setNotes(notes.map(note => note.id !== id ? note : responseNote))\n    })\n      .catch(error => {\n        console.log(\"Failed to Update Importance\", error)\n      })\n  }\n\n  async function updateDateOf(id) {\n    const note = notes.find(n => n.id === id)\n    const newDate = new Date().toISOString()\n    const changedNote = { ...note }\n    changedNote.date = newDate\n\n    noteService.updateDate(id, changedNote).then(responseNote => {\n      setNotes(notes.map(note => note.id !== id ? note : responseNote))\n    })\n      .catch(error => {\n        setErrorMessage(`Note ${note.content}'s was already removed`)\n      })\n      .finally(\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n      )\n    setNotes(notes.filter(n => n.id !== id))\n\n  }\n\n  async function removeNote(id) {\n    const note = notes.find(n => n.id === id)\n\n    await noteService.remove(id, note).then(\n      loadNotes()\n    ).catch(error => {\n      console.log(\"Failed to Delete note\", error)\n    })\n\n\n  }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n\n  return (\n    <div className=\"App\">\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => { setShowAll(!showAll) }}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n            updateDate={() => updateDateOf(note.id)}\n            removeNote={() => removeNote(note.id)}\n          />)}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} placeholder={\"A new note...\"} />\n        <button type=\"submit\">save note</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\n\n\n// THIS STAYS\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n\n\n\n\n"],"sourceRoot":""}